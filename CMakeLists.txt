# Checks that CMake installed version is at least 2.0
IF("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" GREATER 1.9)
# This is required before searching for SWIG
SET(CMAKE_SWIG_OUTDIR ${LIBRARY_OUTPUT_PATH})

# Declares NCL source path variable
SET(NCL_SOURCE_PATH CACHE PATH "Directory of NCL source containing NCL classes")

IF(NCL_SOURCE_PATH)

INCLUDE_DIRECTORIES(${NCL_SOURCE_PATH})

ELSE(NCL_SOURCE_PATH)

MESSAGE(FATAL_ERROR "NCL source or binaries are required. Please set the value of NCL_SOURCE_PATH")

ENDIF(NCL_SOURCE_PATH)

# Search for swig
FIND_PATH(SWIG_DIR swig)
FIND_PACKAGE(SWIG)
IF (SWIG_FOUND)

INCLUDE(${SWIG_USE_FILE})

# Include directory containing ncl.i
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

# Show SWIG c++ options is required
SET_SOURCE_FILES_PROPERTIES(ncl.i PROPERTIES CPLUSPLUS ON)

# Set all NCL required source files
SET(NCL_SRCS ${NCL_SOURCE_PATH}/nxstoken.cpp
	     ${NCL_SOURCE_PATH}/nxsstring.cpp
	     ${NCL_SOURCE_PATH}/nxsblock.cpp
	     ${NCL_SOURCE_PATH}/nxsreader.cpp
	     ${NCL_SOURCE_PATH}/nxsexception.cpp
	     ${NCL_SOURCE_PATH}/nxstaxablock.cpp
	     ${NCL_SOURCE_PATH}/nxstreesblock.cpp
	     ${NCL_SOURCE_PATH}/nxsassumptionsblock.cpp
	     ${NCL_SOURCE_PATH}/nxscharactersblock.cpp
	     ${NCL_SOURCE_PATH}/nxsdatablock.cpp
	     ${NCL_SOURCE_PATH}/nxsdiscretedatum.cpp
	     ${NCL_SOURCE_PATH}/nxsdiscretematrix.cpp
	     ${NCL_SOURCE_PATH}/nxsdistancesblock.cpp
	     ${NCL_SOURCE_PATH}/nxsdistancedatum.cpp
	     ${NCL_SOURCE_PATH}/nxssetreader.cpp
)


# Process Perl bindings build
IF (CMAKE_CURRENT_BINARY_DIR MATCHES perl[/\\]?$)
IF (NOT PERL_INCLUDE_PATH)
# Employing a work around given there is a bug in FindPerlLibs package
FIND_PACKAGE(Perl)

IF (PERL_FOUND)

EXECUTE_PROCESS(COMMAND echo "use Config;print \$Config{archlib};" COMMAND ${PERL_EXECUTABLE} OUTPUT_VARIABLE PERL_INCLUDE_PATH)

IF (UNIX)
SET (PERL_INCLUDE_PATH ${PERL_INCLUDE_PATH}/CORE/)
ELSEIF (WIN32)
SET (PERL_INCLUDE_PATH ${PERL_INCLUDE_PATH}\\CORE\\)
ENDIF (UNIX)

ENDIF (PERL_FOUND)

IF(NOT PERL_INCLUDE_PATH)
MESSAGE(FATAL_ERROR "Perl libraries are required. Please set the value of PERL_INCLUDE_PATH")
ENDIF(NOT PERL_INCLUDE_PATH)

INCLUDE_DIRECTORIES(${PERL_INCLUDE_PATH})
SWIG_ADD_MODULE(ncl perl ncl.i ${NCL_SRCS})
SET_DIRECTORY_PROPERTIES(${CMAKE_CURRENT_BINARY_DIR} ADDITIONAL_MAKE_CLEAN_FILES nclPERL_wrap.h)
SET_DIRECTORY_PROPERTIES(${CMAKE_CURRENT_BINARY_DIR} ADDITIONAL_MAKE_CLEAN_FILES ncl.pm)

ENDIF (NOT PERL_INCLUDE_PATH)
ENDIF (CMAKE_CURRENT_BINARY_DIR MATCHES perl[/\\]?$)


# Process Python bindings build
IF (CMAKE_CURRENT_BINARY_DIR MATCHES python[/\\]?$)
IF (NOT PYTHON_INCLUDE_PATH)
FIND_PACKAGE(PythonLibs)

IF(NOT PYTHON_INCLUDE_PATH)
MESSAGE(FATAL_ERROR "Python libraries are required. Please set the value of PYTHON_INCLUDE_PATH")
ENDIF(NOT PYTHON_INCLUDE_PATH)

INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
SWIG_ADD_MODULE(ncl python ncl.i ${NCL_SRCS})
SET_DIRECTORY_PROPERTIES(${CMAKE_CURRENT_BINARY_DIR} ADDITIONAL_MAKE_CLEAN_FILES ncl.py)
SET_DIRECTORY_PROPERTIES(${CMAKE_CURRENT_BINARY_DIR} ADDITIONAL_MAKE_CLEAN_FILES ncl.py)

ENDIF (NOT PYTHON_INCLUDE_PATH)
ENDIF (CMAKE_CURRENT_BINARY_DIR MATCHES python[/\\]?$)


# Process Ruby bindings build
IF (CMAKE_CURRENT_BINARY_DIR MATCHES ruby[/\\]?$)
IF (NOT RUBY_INCLUDE_PATH)
FIND_PACKAGE(Ruby)

IF(NOT RUBY_INCLUDE_PATH)
MESSAGE(FATAL_ERROR "Ruby libraries are required. Please set the value of RUBY_INCLUDE_PATH")
ENDIF(NOT RUBY_INCLUDE_PATH)

INCLUDE_DIRECTORIES(${RUBY_INCLUDE_PATH})
SWIG_ADD_MODULE(ncl ruby ncl.i ${NCL_SRCS})
SET_DIRECTORY_PROPERTIES(${CMAKE_CURRENT_BINARY_DIR} ADDITIONAL_MAKE_CLEAN_FILES nclRUBY_wrap.h)

ENDIF (NOT RUBY_INCLUDE_PATH)
ENDIF (CMAKE_CURRENT_BINARY_DIR MATCHES ruby[/\\]?$)


ENDIF (SWIG_FOUND)
ENDIF("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" GREATER 1.9)
